# async_workers=ASYNC_WORKERS
async_workers_group=ASYNC_WORKERS_GROUP

request_route {
    # per request initial checks
        route(REQINIT);
        route(WS_HANDLER);


    # CANCEL processing
        if (is_method("CANCEL")) {
    	if (t_check_trans()) {
        	route(RELAY);
        }
        exit;
    }

    if (!is_method("ACK")) {
    	if(t_precheck_trans()) {
        	t_check_trans();
            exit;
        }
        t_check_trans();
    }

    if (is_method("INVITE|REGISTER")) {
    	route(NATDETECT);
    }

    if (is_method("REGISTER")) {
    	route(AUTH);
    }

    if (is_method("MESSAGE")){
    	sl_send_reply("403", "Forbidden");
    }

    route(DIALOG);
}

route[REQINIT] {
        xlog("L_INFO", "| New request - M=$rm R=$ru F=$fu IP=$si:$sp ID=$ci\n");
        force_rport;

        if (!mf_process_maxfwd_header("10")) {
		xlog("L_INFO", "Too Many Hops\n");
		send_reply("483", "Too Many Hops");
		exit;
	}

        # if ($rU==$null) {
	# 	# request with no Username in RURI
	# 	sl_send_reply("484","Address Incomplete");
	# 	exit;
	# }
}

route[WS_HANDLER]{
		xlog("L_INFO", "| RUN REQINIT_WS");
		if (nat_uac_test(64)) {
		# Do NAT traversal stuff for requests from a WebSocket
		# connection - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		# force_rport();
		if (is_method("REGISTER")) {
			xlog("L_INFO", "| WS | REGISTER");
			fix_nated_register();
		} else {
			if (!add_contact_alias()) {
				xlog("L_ERR", "| WS | Error aliasing contact <$ct>\n");
				sl_send_reply("400", "Bad Request");
				exit;
			}
		}
	}  
}

# Authorization via API
route[RELAY_API]{
        xlog("L_INFO", "| RELAY_API | start");

        $http_req(all) = $null;
        $http_req(suspend) = 1;
        $http_req(timeout) = 3000;
        $http_req(method) = "POST";
        $http_req(hdr) = "Content-Type: application/json";

        # if token exist
        #!ifdef KAMAILIO_API_AUTH_TOKEN
        $http_req(hdr) = "Authorization: Bearer "+KAMAILIO_API_AUTH_TOKEN;
        #!endif

        jansson_set("string", "event", "sip-routing", "$var(http_routing_query)");
        jansson_set("string", "source_ip", $avp(source_ip), "$var(http_routing_query)");
        jansson_set("int", "source_port", $avp(source_port), "$var(http_routing_query)");
        jansson_set("int", "auth", 0, "$var(http_routing_query)");
        jansson_set("string", "call_id", $ci, "$var(http_routing_query)");
        jansson_set("string", "from_name", $fn, "$var(http_routing_query)");
        jansson_set("string", "from_uri", $fu, "$var(http_routing_query)");
        jansson_set("string", "from_tag", $ft, "$var(http_routing_query)");
        jansson_set("string", "to_name", $tn, "$var(http_routing_query)");
        jansson_set("string", "to_uri", $tu, "$var(http_routing_query)");
        jansson_set("string", "to_tag", $tt, "$var(http_routing_query)");
        jansson_set("string", "ua", $ua, "$var(http_routing_query)");

        xlog("L_INFO","| RELAY_API |  REQUEST: $var(http_routing_query)\n");

        $http_req(body) = $var(http_routing_query);

        http_async_query(KAMAILIO_API_AUTH_URL, "RELAY_API_RESPONSE");
}

route[RELAY_API_RESPONSE] {
        if ($http_ok && $http_rs == 200) {
                xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
                #jansson_get("data.ha1", $http_rb, "$avp(hash1)");
                #xlog("L_INFO", "API RESP hash>>> $avp(hash1)");
                #if (jansson_get("data[ha1]", $http_rb, "$avp(hash1)")) {
                 if (jansson_get("data.ha1", $http_rb, "$avp(hash1)")) {
                        xlog("L_INFO", "API RESP hash>>> $avp(hash1)");

                        if (!pv_auth_check("$fd", "$avp(hash1)", "1", "0")) {
                                # xlog("L_INFO", "| AUTH API RESPONSE | auth_challenge");
                                auth_challenge("$fd", "0");
                                # route(NAT);
                                # exit;
                        } else {
                                # xlog("L_INFO", "| AUTH API RESPONSE | consume_credentials");
                                route(NATDETECT);
                                consume_credentials();
                                save("location");
                        }
                }

                xlog("L_INFO", "| AUTH API RESPONSE | OK");
                        xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
                # save("location");
        } else if ($http_rs > 400 && $http_rs < 599) {
                xlog("L_INFO", "| AUTH API | client >> $fu | status: $http_rr | status_code: $http_rs\n");
                send_reply(403, "Forbidden");
        } else {
                xlog("L_INFO", "Auth API Not Available");
                        xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
                send_reply(503, "Auth API Not Available");
        }

        exit;
}

route[AUTH] {
        if (is_method("REGISTER")){
                xlog('L_INFO', '| ROUTE AUTH | REGISTER');
                # Authorization via API
                async_task_route("RELAY_API");
        }


        if ((is_method("INVITE"))){
                xlog('L_INFO', '| ROUTE AUTH | INVITE');
                if(!allow_source_address("200")){
                        xlog("L_INFO", "Nope. Don't know who you are");
                        sl_reply("403", "Nope. Don't know who you are"); 
                        exit;   
                } else {
                        return;
                        }               
        }
}

route[NATDETECT] {
        xlog("L_INFO", "| ROUTE NATDETECT | start");
        force_rport();
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        if(is_first_hop()) {
                                if (!set_contact_alias()) {
                                        xlog("L_ERR", "Error in aliasing contact $ct\n");  
                                        sl_send_reply("400", "Bad Request");
                                }
                        }
                }

        }

        return;
}

route[DIALOG] {
        if (is_method("INVITE")) {
                route(AUTH);

                if (!lookup("location")) {                      # Try looking up location
                        xlog("L_INFO", "| INVITE | Not found in location, Forbidden");
                        sl_send_reply("404", "Not found");      # If looking up location fails reply with 404
                        exit;                                   # And exit
                }

                handle_ruri_alias();
                record_route();
                route(RELAY);
        }

        if (has_totag()) {
                if (loose_route()) {
                        handle_ruri_alias();
                        route(RELAY);
                }
        }

        if (is_method("ACK")) {
                if ( t_check_trans() ) {
                        route(RELAY);
                        exit;
                } else {
                        exit;
                }
        }
}
 

route[RELAY] {
    xlog("L_INFO", "| ROUTE RELAY |");
        
    # pcre_match("$dP", "(?i)wss|ws");
    # xlog("L_INFO", "| ROUTE RELAY | DP | $dP");

    if(is_method("CANCEL") || is_method("ACK")) {
                t_relay();
    }


	if ($proto =~ "ws") {
	 	# Coming from websocket
		if (pcre_match("$dP", "(?i)wss|ws")) { # WebRTC > WebRTC
			xlog("L_INFO", "WebRTC > WebRTC");
			rtpengine_manage("trust-address replace-origin replace-session-connection ICE=force");
			# t_on_reply("REPLY_WS_TO_WS");
                        t_on_reply("REPLY");
		} else { 
			# WebRTC > SIP
			xlog("L_INFO", "WebRTC > SIP");
			rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP");
			t_on_reply("REPLY_WS_TO_SIP");
            # t_on_reply("REPLY");
		}
	} else { 
		# Coming from SIP
    		xlog("L_INFO", "| Coming from SIP |");
		if (pcre_match("$dP", "(?i)wss|ws")) { # SIP > WebRTC
			xlog("L_INFO", "SIP > WebRTC");

			if(nat_uac_test("19")) {
				rtpengine_manage("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
			} else {
				rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
			}

			# t_on_reply("REPLY_SIP_TO_WS");
                	t_on_reply("REPLY");
			} else { 
				# SIP > SIP
				xlog("L_INFO", "SIP > SIP");

				if(nat_uac_test("19")) {
                			xlog("L_INFO", "| RELAY | nat_uac_test 19 ok");
					rtpengine_manage("replace-origin replace-session-connection");
				} else {
                			xlog("L_INFO", "| RELAY | nat_uac_test 19 false");
					rtpengine_manage("trust-address replace-origin replace-session-connection");
				}
			
                        	t_on_reply("REPLY_SIP_TO_SIP");
                        	# t_on_reply("REPLY");
			}
	}        


        # t_on_reply("REPLY");
        t_relay();
}
 
onreply_route[REPLY] {
        xlog("L_DBG", "| RUN onreply_route[REPLY]");
        xlog("L_DBG", "| Status > status");
        route(NATDETECT);

        if (has_body("application/sdp")) {
                xlog("L_DBG", "| RUN onreply_route[REPLY] body");
                # rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
                rtpengine_manage("replace-origin");
        }
        # rtpengine_manage("replace-origin");
}

onreply_route[REPLY_SIP_TO_WS] {
	xlog("L_DBG", "Reply from websocket to SIP: $rs");

	# if(status=~"[12][0-9][0-9]") {
		rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP");
		# route(NATMANAGE);
	# }
}

onreply_route[REPLY_WS_TO_SIP] {
	xlog("L_DBG", "Reply from SIP to websocket: $rs");

	if (t_check_status("183")) {
		change_reply_status("180", "Ringing");
		remove_body();
		# route(NATMANAGE);
		exit;
	}

	if(!(status=~"[12][0-9][0-9]") || !(sdp_content())) {
		return;
	}

	if(nat_uac_test("19")) {
		rtpengine_manage("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
	} else {
		rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
	}

	# route(NATMANAGE);
}

onreply_route[REPLY_SIP_TO_SIP] {
	xlog("L_DBG", "Reply from SIP to SIP: $rs");

	# if(status=~"[12][0-9][0-9]") {
		# if(nat_uac_test("19")) {
                #         xlog("L_INFO", "|| onreply_route[REPLY_SIP_TO_SIP] | NAT TEST OK ||");
		# 	# rtpengine_manage("replace-origin replace-session-connection");
                #         rtpengine_manage("replace-origin");
		# } else {
                #         xlog("L_INFO", "|| onreply_route[REPLY_SIP_TO_SIP] | NAT TEST FALSE ||");
		# 	rtpengine_manage("trust-address replace-origin replace-session-connection");
		# }
		# route(NATMANAGE);
	# }
                if (has_body("application/sdp")) {
                xlog("L_DBG", "| RUN onreply_route[REPLY] body");
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
                # rtpengine_manage("replace-origin");
        }
}

include_file "xhttp.conf"
