request_route {
        # per request initial checks
        route(REQINIT);

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }
                exit;
        }

        if (is_method("INVITE") || is_method("REGISTER")) {
                route(NAT);
        }

        if (is_method("REGISTER")) {
                route(AUTH);
        }

        route(DIALOG);
}

route[REQINIT] {
        xlog("L_DBG", "| New request - M=$rm R=$ru F=$fu IP=$si:$sp ID=$ci\n");
        force_rport();

        if (!mf_process_maxfwd_header("10")) {
                xlog("L_INFO", "Too Many Hops\n");
                send_reply("483", "Too Many Hops");
                exit;
        }

        if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent|pplsip") {
                # silent drop for scanners - uncomment next line if want to reply
                # sl_send_reply("200", "OK");
                exit;
        }
}

# Authorization via API
route[RELAY_API]{
        $http_req(all) = $null;
        $http_req(suspend) = 1;
        $http_req(timeout) = 3000;
        $http_req(method) = "POST";
        $http_req(hdr) = "Content-Type: application/json";

        # if token exist
        #!ifdef KAMAILIO_AUTH_API_TOKEN
        $http_req(hdr) = "Authorization: Bearer "+KAMAILIO_AUTH_API_TOKEN;
        #!endif

        jansson_set("string", "event", "sip-routing", "$var(http_routing_query)");
        jansson_set("string", "source_ip", $si, "$var(http_routing_query)");
        jansson_set("string", "from_uri", $fu, "$var(http_routing_query)");

        $http_req(body) = $var(http_routing_query);

        http_async_query(KAMAILIO_AUTH_API_URL, "RELAY_API_RESPONSE");
}

route[RELAY_API_RESPONSE] {
        if ($http_ok && $http_rs == 200) {
                # xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
                if (jansson_get("data.ha1", $http_rb, "$avp(hash1)")) {
                        if (!pv_auth_check("$fd", "$avp(hash1)", "1", "0")) {
                                auth_challenge("$fd", "0");
                        } else {
                                ## TODO: route NATDETECT
                                route(NAT);
                                consume_credentials();
                                save("location");
                        }
                }

                xlog("L_INFO", "| F=$fu | | AUTH API RESPONSE | OK\n");
                xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
        } else if ($http_rs > 400 && $http_rs < 599) {

                xlog("L_INFO", "| AUTH API | client >> $fu | IP=$si:$sp | status: $http_rr | status_code: $http_rs\n");
                send_reply(403, "Forbidden");
        } else {
                xlog("L_INFO", "Auth API Not Available\n");
                xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");
                send_reply(503, "Auth API Not Available");
        }

        exit;
}

## Auth from local db
route[AUTH_LOCAL] {
                if (!auth_check("$fd", "subscriber", "1")) {
                       force_rport();
                       auth_challenge("$fd", "1");
                       exit;
                }
                       save("location");
                       exit;        
}

route[AUTH] {
        if (is_method("REGISTER")){
                # Authorization via API
                async_task_route("RELAY_API");

                # auth local
                # route("AUTH_LOCAL")


        }

        # "INVITE" only allowed source IP address
        if ((is_method("INVITE"))){
                if(!allow_source_address("200")){
                        xlog("L_DBG", "Nope. Don't know who you are\n");
                        sl_reply("403", "Nope. Don't know who you are");
                        exit;
                } else {
                        return;
                }
        }

        return;
}

route[NAT] {
        force_rport();
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                        # set_contact_alias();

                } else {
                        if(is_first_hop()) {
                                set_contact_alias();
                        }
                }
        }
        return;
}

route[DIALOG] {
        if (is_method("INVITE")) {
                route(AUTH);
                if (!lookup("location")) {
                        sl_send_reply("404", "Not Found");
                        exit;
                }

                handle_ruri_alias();
                record_route();
                route(RELAY);
        }

        if (has_totag()) {
                if (loose_route()) {
                        handle_ruri_alias();
                        route(RELAY);
                }
        }

        if (is_method("ACK")) {
                if ( t_check_trans() ) {
                        route(RELAY);
                        exit;
                } else {
                        exit;
                }
        }
}

route[RELAY] {
        xlog("L_INFO", "| RELAY\n");
        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
        t_on_reply("REPLY");
        t_relay();
}

onreply_route[REPLY] {
        xlog("L_INFO", "| REPLY\n");
        route(NAT);
        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
}

include_file "xhttp.conf"
